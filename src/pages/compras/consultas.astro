---
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/ui/Card.astro';
import Input from '../../components/ui/Input.astro';
import Select from '../../components/ui/Select.astro';
import Button from '../../components/ui/Button.astro';
import Table from '../../components/ui/Table.astro';
import Badge from '../../components/ui/Badge.astro';
import type { ApiOrder } from '../../types/api';

const tableHeaders = ["N° Memo", "Fecha Memo", "Proveedor", "Concepto", "Monto Total", "Estado", "Acciones"];

let tableRows: (string | number)[][] = [];
let fetchError = null;

const apiUrl = import.meta.env.INTERNAL_API_URL;

try {
  if (!apiUrl) {
    throw new Error("La variable de entorno INTERNAL_API_URL no está definida en el archivo .env del frontend.");
  }

  const response = await fetch(`${apiUrl}/api/orders`);
  
  if (!response.ok) {
    throw new Error(`Error del servidor: ${response.status} ${response.statusText}`);
  }

  const orders: ApiOrder[] = await response.json();
  
  if (orders && orders.length > 0) {
    tableRows = orders.map((order: ApiOrder) => ([
      order.memoNumber,
      new Date(order.memoDate).toLocaleDateString('es-VE'),
      order.provider,
      order.concept,
      order.totalAmount.toFixed(2),
      order.status,
      "Ver" 
    ]));
  }

} catch (error) {
  console.error("Error al obtener las órdenes:", error);

  if (error instanceof Error) {
    fetchError = error.message;
  } else {
    fetchError = "Ocurrió un error inesperado. Revise la consola del servidor.";
  }
}
---

<Layout title="Consultas y Reportes">
  <h1 class="text-3xl font-bold mb-6 text-slate-900">Consultas y Reportes</h1>

  <Card title="Filtros de Búsqueda">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <Input label="Palabra Clave en Concepto" placeholder="ej. computación" />
      <Select label="Proveedor" options={["Todos", "Proveedor A, C.A.", "Suministros B, S.R.L."]} />
      <Input label="Fecha Desde" type="date" />
      <Input label="Fecha Hasta" type="date" />
    </div>
    <div class="mt-4 text-right">
      <Button variant="primary">Buscar</Button>
    </div>
  </Card>

  <div class="mt-8">
    {fetchError ? (
      <div class="p-4 text-red-700 bg-red-100 rounded-lg" role="alert">
        <span class="font-medium">Error:</span> {fetchError}
      </div>
    ) : (
      <Table headers={tableHeaders}>
        {tableRows.map((row: (string | number)[]) => (
          <tr class="bg-white border-b hover:bg-slate-50">
            <td class="px-6 py-4 font-medium text-blue-600">{row[0]}</td>
            <td class="px-6 py-4">{row[1]}</td>
            <td class="px-6 py-4">{row[2]}</td>
            <td class="px-6 py-4 text-slate-800 max-w-xs truncate" title={String(row[3])}>{row[3]}</td>
            <td class="px-6 py-4 text-right font-mono">{row[4]}</td>
            <td class="px-6 py-4">
              {/* CORRECCIÓN APLICADA AQUÍ: Asegúrate de que todas las props son 'color' */}
              {String(row[5]) === 'En Proceso' && <Badge color="blue" text="En Proceso" />}
              {String(row[5]) === 'Aprobada' && <Badge color="green" text="Aprobada" />}
              {String(row[5]) === 'Completada' && <Badge color="gray" text="Completada" />}
              {String(row[5]) === 'Anulada' && <Badge color="red" text="Anulada" />}
            </td>
            <td class="px-6 py-4">
              <a href="#" class="font-medium text-blue-600 hover:underline">Ver</a>
            </td>
          </tr>
        ))}
      </Table>
    )}
  </div>
</Layout>